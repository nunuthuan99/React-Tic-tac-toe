{"version":3,"sources":["index.js"],"names":["Square","props","id","onClick","className","value","Board","i","key","this","squares","row","j","push","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","toggleSortDes","slice","length","calculateWinner","document","getElementById","classList","remove","add","setState","concat","step","status","current","winner","moves","map","move","desc","prev","curr","matrix","calculateRowColumn","jumpTo","reverse","listSquareWin","querySelectorAll","textContent","toggleSortButton","handleClickButton","handleClick","lines","a","b","c","ReactDOM","render"],"mappings":"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","file":"static/js/main.3691e66a.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n//import classNames from 'classnames'\r\n\r\n\r\nfunction Square(props) {\r\n  return (\r\n    <button\r\n      id = {\"square-\" + props.id}\r\n      onClick = { props.onClick }\r\n      className =\"square\"\r\n    >\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\n\r\nclass Board extends React.Component {\r\n  renderSquare(i) {\r\n    return (<Square\r\n              key = {i}\r\n              id = {i}\r\n              value = {this.props.squares[i]}\r\n              onClick = { () => this.props.onClick(i) }\r\n           />);\r\n  } \r\n\r\n  render() {\r\n    const boardSize = 3;\r\n    let squares = [];\r\n    for (let i = 0; i < boardSize; ++i) {\r\n      let row = [];\r\n      for (let j = 0; j < boardSize; ++j) row.push(this.renderSquare(i * boardSize + j));\r\n      squares.push(<div key={i} className=\"board-row\">{row}</div>);\r\n    }\r\n    return ( <div>{squares}</div> );\r\n  }\r\n}\r\n\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = { \r\n      history: [{squares: Array(9).fill(null), }],\r\n      stepNumber: 0,\r\n      xIsNext: true,\r\n      toggleSortDes: false, // toggle button that sorting the moves in either ascending or descending order. Sorted by ascending by default.\r\n    }\r\n  }\r\n\r\n  // for clicking on the matrix board.\r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice(); // copy array\r\n    if (calculateWinner(squares)[0] || squares[i]) return; // check last step: win or click the square which is clicked\r\n\r\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n    document.getElementById(\"square-\" + i).classList.remove(\"square-X\", \"square-O\");\r\n    document.getElementById(\"square-\" + i).classList.add(\"square-\" + squares[i]); // add css for square that is clicked\r\n\r\n    this.setState({\r\n      history: history.concat( [{squares: squares}] ), // change 'history' variable\r\n      stepNumber: history.length,\r\n      xIsNext: !this.state.xIsNext,\r\n    });\r\n  }\r\n\r\n  jumpTo(step) { // jump to that step but not change 'history' variable\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: (step % 2) === 0,\r\n    })\r\n  }\r\n  \r\n  // for toggleSortButton\r\n  handleClickButton() {\r\n    this.setState({\r\n      toggleSortDes: !this.state.toggleSortDes,\r\n    })\r\n  }\r\n\r\n\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const winner = calculateWinner(current.squares)[0];\r\n    let status;\r\n\r\n    // create list of moves buttons and handle them\r\n    var moves = history.map((step, move) => {\r\n      const desc = move ?\r\n        'Go to move #' + move + ': ' + calculateRowColumn(history[move - 1].squares, history[move].squares) :\r\n        'Go to game start';\r\n      return (\r\n        <li key = {move}>\r\n          <button className = \"btn\" onClick={() => {this.jumpTo(move);}}> {desc} </button>\r\n        </li>\r\n      );\r\n    });\r\n    if (this.state.toggleSortDes) \r\n      moves = moves.reverse()\r\n\r\n    // handle 'status'\r\n    if (winner) {\r\n      status = 'Winner: ' + winner;\r\n\r\n      for (let i = 0; i < 3; i++)  { // add class for which lines get win.\r\n        document.getElementById(\"square-\" + calculateWinner(current.squares)[1][i]).classList.remove(\"square-X\", \"square-O\");\r\n        document.getElementById(\"square-\" + calculateWinner(current.squares)[1][i]).classList.add(\"square-win\");\r\n      }\r\n    } else {\r\n        if (this.state.stepNumber === 9) status = 'No one win !';\r\n        if (this.state.stepNumber !== 9) status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');  \r\n\r\n        // if we have a winner and we want to get back by step. Remove/add css class line win.\r\n        let listSquareWin = document.querySelectorAll(\".square-win\") \r\n        for (let i = 0; i < listSquareWin.length; i++) {\r\n          listSquareWin[i].classList.remove(\"square-win\");\r\n          if (listSquareWin[i].textContent === \"X\") listSquareWin[i].classList.add(\"square-X\");\r\n          else if (listSquareWin[i].textContent === \"O\") listSquareWin[i].classList.add(\"square-O\");\r\n        };\r\n    }\r\n    \r\n    // create a button to sort list of moves by ascending/descending\r\n    let toggleSortButton = (<button \r\n                            onClick = { () => this.handleClickButton() }\r\n                            id=\"button-toggle-sort\"\r\n                          > {this.state.toggleSortDes ? \"Sort by ascending\" : \"Sort by descending\"} </button>)\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board \r\n            squares = {current.squares} \r\n            onClick = {(i) => this.handleClick(i)}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div id=\"div-status\">\r\n            {status} \r\n            {toggleSortButton}\r\n          </div>\r\n          <ul>{moves}</ul>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nfunction calculateWinner(squares) {\r\n  \"To calculate a winner in this step (in this 'squares' array.)\"\r\n  \"Return a array with 2 elements.\"\r\n  \"First element: 'X' if X is a winner, same to 'Y'. 'null' if no one wins in this step.\"\r\n  \"Second element: an array that caused the win. Or a empty array if no one wins in this step.\"\r\n  const lines = [\r\n    [0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6],\r\n    [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return [squares[a], lines[i]];\r\n    }\r\n  }\r\n  return [null, []];\r\n}\r\nfunction calculateRowColumn(prev, curr) {\r\n  const matrix = [\r\n    [1, 1], [1, 2], [1, 3],\r\n    [2, 1], [2, 2], [2, 3],\r\n    [3, 1], [3, 2], [3, 3],\r\n  ]\r\n  let i;\r\n  for (i = 0; i < 9; i++)\r\n    if (prev[i] !== curr[i]) break;\r\n  return 'index: [' + matrix[i][0] + ', ' + matrix[i][1] + ']';\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}